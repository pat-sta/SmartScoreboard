class baseball_animations{
public:

byte curr_bases;
int frames_left;
int curr_idx [3];


bool play_frame(){
	if(frames_left==0) return false;
  print_idx();
	curr_bases= curr_idx_value();
 curr_idx[2]++;
	frames_left--;
  
	return true;
}

void print_idx(){
  Serial.print(curr_idx[0]);
  Serial.print(", ");
  Serial.print(curr_idx[1]);
   Serial.print(", ");
  Serial.println(curr_idx[2]);
}

void init_animation(byte start_bases, int hit_num){
	curr_idx[0] = (start_bases & 0b0111);
	curr_idx[1] = hit_num-1;
	curr_idx[2] = 0;
	frames_left= curr_idx_value();
  print_idx();
	curr_idx[2]++;
	
}




byte curr_idx_value() { return animation_LUT [curr_idx[0]] [curr_idx[1]] [curr_idx[2]] ;}

byte animation_LUT [8][4][9]= { 
// First element in array is animation length

	{ // 1000 = Starting Bases 
		{ 2, 0b0100, 0b0100, 0b1100, 0, 0, 0, 0, 0}, // SINGLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // DOUBLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // TRIPLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0} // HR

	},

	{ // 1001 = Starting Bases 
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // SINGLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // DOUBLE
		{ 6, 0b0101, 0b0011, 0b1010, 0b0001, 0b0001, 0b1001, 0, 0}, // TRIPLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}  // HR
	},

	{ // 1010 = Starting Bases 
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // SINGLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // DOUBLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // TRIPLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}  // HR
	},

	{ // 1011 = Starting Bases 
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // SINGLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // DOUBLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // TRIPLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}  // HR
	},

	{ // 1100 = Starting Bases 
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // SINGLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // DOUBLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // TRIPLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}  // HR
	},

	{ // 1101 = Starting Bases 
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // SINGLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // DOUBLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // TRIPLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}  // HR

	},


	{ // 1110 = Starting Bases 
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // SINGLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // DOUBLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // TRIPLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}  // HR  
	},

	{ // 1111 = Starting Bases 
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // SINGLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // DOUBLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}, // TRIPLE
		{ 8, 0, 0, 0, 0, 0, 0, 0, 0}  // HR  

	}
};





};


// 1000 - 1: 0100, 1100
// 	 - 2: 0100, 0010, 1010
// 	 - 3: 0100, 0010, 0001, 1001, 0001, 1001
// 	 - 4: 0100, 0010, 0001, 0000, 1000

// 1001 - 1: 0101, 1101
// 	 - 2: 0101, 0011, 1011
// 	 - 3: 0101, 0011, 1001, 0001, 1001
// 	 - 4: 0101, 0011, 1001, 1000, 0000, 1000

// 1010 - 1: 0110, 1110
// 	 - 2: 0110, 0011, 1011
// 	 - 3: 0110, 0011, 1001, 0001, 1001
// 	 - 4: 0110, 0011, 1001, 1000, 0000, 1000

// 1011 - 1: 0111, 1111
// 	 - 2: 0111, 1011, 0011, 1011
// 	 - 3: 0111, 1011, 1001, 0001, 1001
// 	 - 4: 0111, 1011, 1001, 1000, 0000, 1000

// 1100 - 1: 0110, 1110
// 	 - 2: 0110, 0011, 1011
// 	 - 3: 0110, 0011, 1001, 0001, 1001
// 	 - 4: 0110, 0011, 1001, 1000, 0000, 1000

// 1101 - 1: 0111, 1111
// 	 - 2: 0111, 1011, 0011, 1011
// 	 - 3: 0111, 1011, 1001, 0001, 1001
// 	 - 4: 0111, 1011, 1001, 1000, 0000, 1000

// 1110 - 1: 0111, 1111
// 	 - 2: 0111, 1011, 0011, 1011
// 	 - 3: 0111, 1011, 1001, 0001, 1001
// 	 - 4: 0111, 1011, 1001, 1000, 0000, 1000

// 1111 - 1: 1111, 0111, 1111
// 	 - 2: 1111, 1011, 0011, 1011
// 	 - 3: 1111, 1011, 1001, 0001, 1001
// 	 - 4: 1111, 1011, 1001, 1000, 0000, 1000
